// Compiled by ClojureScript 1.7.170 {:static-fns true, :optimize-constants true}
goog.provide('om_mantras.docs.selectable');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('devcards.core');
goog.require('garden.core');
goog.require('om.dom');
goog.require('om_mantras.selectable');
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,null,cljs.core.cst$kw$main_DASH_obj,devcards.core.markdown__GT_react.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["# Selectable\n\n  Selectable is a reusable Om Next component for selecting multiple items\n  from a collection. It is based on text input and provides a mechanism to\n  filter matches rendered in a popup. Selectable can be used in flexible\n  ways, preserves all freedom of styling and allows custom elements to be\n  defined for the items and matches in the popup. It also supports a callback\n  to notify the outside world whenever the selected items have changed."], 0)),cljs.core.cst$kw$initial_DASH_data,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$hide_DASH_border,true], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,null,cljs.core.cst$kw$main_DASH_obj,devcards.core.markdown__GT_react.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["## Known issues\n\n  * When the user clicks somewhere outside the Selectable, the matches\n    popup should disappear."], 0)),cljs.core.cst$kw$initial_DASH_data,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$hide_DASH_border,true], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,null,cljs.core.cst$kw$main_DASH_obj,devcards.core.markdown__GT_react.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["## Interface\n\n  Selectable is created as follows:\n\n  ```\n  (selectable {:items ...\n               :key-fn ...\n               :element-fn ...\n               :match-fn ...\n               :match-element-fn ...\n               :change-fn ...})\n  ```\n\n  ### Parameters\n\n  * `items` (mandatory) - a collection of items; these can be anything:\n    numbers, strings, maps, vectors, it doesn't matter\n  * `key-fn` (optional but recommended) - a function that takes one argument,\n    an item, and must return a unique key for the item in the collection; can\n    be omitted if the items themselves are distinct strings or numbers\n  * `element-fn` (optional but recommended) - a function that takes one\n    argument, an item, and must return a React element for the item; inside\n    Selectable, the returned elements are each wrapped in a\n    `<div class=\"selectable-item\">`; can be omitted if the items are\n    strings, numbers or anything else that converts to a string that browsers\n    can display\n  * `match-fn` (optional but recommended) - a function that takes two\n    arguments, an item and the text currently entered into the Selectable;\n    the function must return a true-ish value if the item is to be included\n    in the matches for the text\n  * `match-element-fn` (optional but recommended) - a function that takes\n    on argument, an item, and must return a React element for the item; this\n    element is then rendered inside a `<div class=\"selectable-match\">` in\n    the popup showing the matches for the current text; can be omitted if the\n    items are strings, numbers or anything else that converts to a string that\n    browsers can display\n  * `change-fn` (optional) - a function that takes one argument, an ordered\n    collection of a subset of the input items; this function is called\n    whenever the selected items change; it can be used to sync the change to\n    your application state"], 0)),cljs.core.cst$kw$initial_DASH_data,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$hide_DASH_border,true], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"## Keyboard navigation\n\n  In addition to typing text into the selectable, special behaviour is\n  defined for the following keys:\n\n  * *Backspace* - removes the selected item before the caret\n  * *Delete* - removes the selected item after the caret\n  * *Escape* - hides the matches popup\n  * *Return* - adds the highlighted match in the popup to the selection\n  * *Up* - highlights the previous match in the popup\n  * *Down* - highlights the next match in the popup\n  * *Left* - moves the caret to the left\n  * *Right* - moves the caret to the right\n  * *Home* - moves the caret to the beginning of the selection\n  * *End* - moves the caret to the end of the selection",cljs.core.cst$kw$main_DASH_obj,null,cljs.core.cst$kw$initial_DASH_data,null,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(null)], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,null,cljs.core.cst$kw$main_DASH_obj,devcards.core.markdown__GT_react.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["## Usage examples"], 0)),cljs.core.cst$kw$initial_DASH_data,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$hide_DASH_border,true], null))], 0))], null));
})], null));
om_mantras.docs.selectable.style_container1 = (function om_mantras$docs$selectable$style_container1(child){
var G__24188 = {"className": "style-container1"};
var G__24189 = (function (){var G__24191 = null;
var G__24192 = garden.core.css.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$style_DASH_container1,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$box_DASH_sizing,"border-box",cljs.core.cst$kw$border,"thin solid #ddd",cljs.core.cst$kw$position,"relative",cljs.core.cst$kw$padding,"5px",cljs.core.cst$kw$padding_DASH_left,"5px"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_selected_DASH_item,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$display,"inline-block",cljs.core.cst$kw$padding,"5px",cljs.core.cst$kw$margin_DASH_right,"5px",cljs.core.cst$kw$background,"#00b8d4",cljs.core.cst$kw$color,"#fff"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_input_DASH_box,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$display,"inline-block"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_input,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$padding,"5px",cljs.core.cst$kw$padding_DASH_left,"0px",cljs.core.cst$kw$margin,"0"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_matches,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$box_DASH_sizing,cljs.core.cst$kw$border_DASH_right,cljs.core.cst$kw$top,cljs.core.cst$kw$width,cljs.core.cst$kw$background,cljs.core.cst$kw$border_DASH_left,cljs.core.cst$kw$z_DASH_index,cljs.core.cst$kw$position,cljs.core.cst$kw$border_DASH_bottom,cljs.core.cst$kw$left],["border-box","thin solid #ddd","100%","100%","#fff","thin solid #ddd",(99),"absolute","thin solid #ddd",(0)])], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_match,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$padding,"5px"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$$selectable_DASH_match_DASH_active,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$background,"#eee"], null)], null)], null)], null)], 0));
return React.DOM.style(G__24191,G__24192);
})();
var G__24190 = child;
return React.DOM.div(G__24188,G__24189,G__24190);
});
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"Selectable list of numbers\n\n  ```\n  (selectable {:items (:numbers @state)\n               :key-fn identity\n               :match-fn #(re-matches (re-pattern (str \".*\" %2 \".*\"))\n                                      (str %1))\n               :change-fn #(swap! state assoc :selected %)})\n  ```",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
return om_mantras.docs.selectable.style_container1((function (){var G__24196 = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$items,cljs.core.cst$kw$numbers.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$key_DASH_fn,cljs.core.identity,cljs.core.cst$kw$match_DASH_fn,(function (p1__24194_SHARP_,p2__24193_SHARP_){
return cljs.core.re_matches(cljs.core.re_pattern([cljs.core.str(".*"),cljs.core.str(p2__24193_SHARP_),cljs.core.str(".*")].join('')),[cljs.core.str(p1__24194_SHARP_)].join(''));
}),cljs.core.cst$kw$change_DASH_fn,(function (p1__24195_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$selected,p1__24195_SHARP_);
})], null);
return (om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1 ? om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1(G__24196) : om_mantras.selectable.selectable.call(null,G__24196));
})());
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$numbers,new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(10),(100),(1000),(2),(25),(250),(1025),(3330),(130)], null)], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$inspect_DASH_data,true,cljs.core.cst$kw$history,false], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"Selectable list of maps (blog posts), matched by tags.\n\n  ```\n  (selectable {:items (:maps @state)\n               :key-fn :id\n               :element-fn #(dom/button nil (:title %))\n               :match-element-fn\n               (fn [item]\n                 (dom/p nil\n                   (dom/strong nil (:title item))\n                   (dom/span #js {:style #js {:marginLeft \"10px\"}}\n                     \"Tags: \" (join \", \" (:tags item)))))\n               :match-fn\n               (fn [item text]\n                 (let [pattern (re-pattern (str \".*\" text \".*\"))]\n                   (some #(re-matches pattern %) (:tags item))))\n               :change-fn #(swap! state assoc :selected %)})))\n  ```",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
return om_mantras.docs.selectable.style_container1((function (){var G__24212 = new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$items,cljs.core.cst$kw$maps.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$key_DASH_fn,cljs.core.cst$kw$id,cljs.core.cst$kw$element_DASH_fn,(function (p1__24197_SHARP_){
var G__24213 = null;
var G__24214 = cljs.core.cst$kw$title.cljs$core$IFn$_invoke$arity$1(p1__24197_SHARP_);
return React.DOM.button(G__24213,G__24214);
}),cljs.core.cst$kw$match_DASH_element_DASH_fn,(function (item){
var G__24217 = null;
var G__24218 = (function (){var G__24220 = null;
var G__24221 = cljs.core.cst$kw$title.cljs$core$IFn$_invoke$arity$1(item);
return React.DOM.strong(G__24220,G__24221);
})();
var G__24219 = (function (){var G__24222 = {"style": {"marginLeft": "10px"}};
var G__24223 = "Tags: ";
var G__24224 = clojure.string.join.cljs$core$IFn$_invoke$arity$2(", ",cljs.core.cst$kw$tags.cljs$core$IFn$_invoke$arity$1(item));
return React.DOM.span(G__24222,G__24223,G__24224);
})();
return React.DOM.p(G__24217,G__24218,G__24219);
}),cljs.core.cst$kw$match_DASH_fn,(function (item,text){
var pattern = cljs.core.re_pattern([cljs.core.str(".*"),cljs.core.str(text),cljs.core.str(".*")].join(''));
return cljs.core.some(((function (pattern){
return (function (p1__24198_SHARP_){
return cljs.core.re_matches(pattern,p1__24198_SHARP_);
});})(pattern))
,cljs.core.cst$kw$tags.cljs$core$IFn$_invoke$arity$1(item));
}),cljs.core.cst$kw$change_DASH_fn,(function (p1__24199_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$selected,p1__24199_SHARP_);
})], null);
return (om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1 ? om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1(G__24212) : om_mantras.selectable.selectable.call(null,G__24212));
})());
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$maps,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$id,(1),cljs.core.cst$kw$title,"Post 1",cljs.core.cst$kw$tags,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["personal","work"], null)], null),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$id,(2),cljs.core.cst$kw$title,"Post 3",cljs.core.cst$kw$tags,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["work"], null)], null),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$id,(3),cljs.core.cst$kw$title,"Post 4",cljs.core.cst$kw$tags,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["personal","work","community"], null)], null)], null)], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$inspect_DASH_data,true,cljs.core.cst$kw$history,false], null))], 0))], null));
})], null));
devcards.core.register_card(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$path,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$om_mantras$docs$selectable,cljs.core.cst$kw$card], null),cljs.core.cst$kw$func,(function (){
return devcards.core.card_base(new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$name,"card",cljs.core.cst$kw$documentation,"Basic styling\n\n  ```\n  .selectable {\n    position: relative;\n    box-sizing: border-box;\n    border: thin solid #ddd;\n    padding: 5px;\n    padding-left: 5px;\n  }\n\n  .selectable-selected-item {\n    display: inline-block;\n    margin-right: 5px;\n    padding: 5px;\n    background: #00b8d4;\n    color: #fff;\n  }\n\n  .selectable-input-box {\n    display: inline-block;\n  }\n\n  .selectable-input {\n    margin: 0;\n    padding: 5px;\n    padding-left: 0px;\n  }\n\n  .selectable-matches {\n    position: absolute;\n    width: 100%;\n    top: 100%;\n    left: 0;\n    z-index: 99;\n    box-sizing: border-box;\n    border-bottom: thin solid #ddd;\n    border-left: thin solid #ddd;\n    border-right: thin solid #ddd;\n    background: #fff;\n  }\n\n  .selectable-match {\n    padding: 5px;\n  }\n\n  .selectable-match-active {\n    background: #eee;\n  }\n  ```",cljs.core.cst$kw$main_DASH_obj,(function (state,_){
return om_mantras.docs.selectable.style_container1((function (){var G__24228 = new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$items,cljs.core.cst$kw$items.cljs$core$IFn$_invoke$arity$1((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(state) : cljs.core.deref.call(null,state))),cljs.core.cst$kw$key_DASH_fn,cljs.core.identity,cljs.core.cst$kw$match_DASH_fn,(function (p1__24226_SHARP_,p2__24225_SHARP_){
return cljs.core.re_matches(cljs.core.re_pattern([cljs.core.str(".*"),cljs.core.str(p2__24225_SHARP_),cljs.core.str(".*")].join('')),p1__24226_SHARP_);
}),cljs.core.cst$kw$change_DASH_fn,(function (p1__24227_SHARP_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,cljs.core.cst$kw$selected,p1__24227_SHARP_);
})], null);
return (om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1 ? om_mantras.selectable.selectable.cljs$core$IFn$_invoke$arity$1(G__24228) : om_mantras.selectable.selectable.call(null,G__24228));
})());
}),cljs.core.cst$kw$initial_DASH_data,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$items,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, ["First","Second","Third","Fourth","Fifth"], null)], null),cljs.core.cst$kw$options,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$heading,false], null),devcards.core.assert_options_map(new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$inspect_DASH_data,true,cljs.core.cst$kw$history,false], null))], 0))], null));
})], null));
