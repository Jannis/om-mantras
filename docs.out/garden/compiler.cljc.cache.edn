;; Analyzed by ClojureScript 1.7.145
{:use-macros {with-media-query-context garden.compiler, with-selector-context garden.compiler}, :excludes #{}, :name garden.compiler, :imports nil, :requires {units garden.units, garden.units garden.units, garden.types garden.types, garden.util garden.util, color garden.color, garden.selectors garden.selectors, util garden.util, compression garden.compression, string clojure.string, garden.color garden.color, clojure.string clojure.string, garden.compression garden.compression, selectors garden.selectors}, :uses {CSSUnit garden.types, CSSFunction garden.types, CSSAtRule garden.types, CSSColor garden.color}, :defs {r-brace {:name garden.compiler/r-brace, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 357, :column 1, :end-line 357, :end-column 23, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 357, :column 16, :end-line 357, :end-column 23, :private true}}, extract-reference {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 180, :column 8, :end-line 180, :end-column 25, :private true, :arglists (quote ([selector])), :doc "Extract the selector portion of a parent selector reference."}, :private true, :name garden.compiler/extract-reference, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 25, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Extract the selector portion of a parent selector reference."}, expand-declaration-1 {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 150, :column 7, :end-line 150, :end-column 27, :arglists (quote ([d]))}, :name garden.compiler/expand-declaration-1, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 27, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, render-color {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 539, :column 17, :end-line 539, :end-column 29, :private true, :arglists (quote ([c]))}, :private true, :name garden.compiler/render-color, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 29, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, top-level-expression? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 101, :column 8, :end-line 101, :end-column 29, :private true, :arglists (quote ([x]))}, :private true, :name garden.compiler/top-level-expression?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, expand-seqs {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 137, :column 8, :end-line 137, :end-column 19, :private true, :arglists (quote ([coll])), :doc "Like flatten but only affects seqs."}, :private true, :name garden.compiler/expand-seqs, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Like flatten but only affects seqs."}, render-selector {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 472, :column 8, :end-line 472, :end-column 23, :private true, :arglists (quote ([selector]))}, :private true, :name garden.compiler/render-selector, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 23, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, render-declaration {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 463, :column 8, :end-line 463, :end-column 26, :private true, :arglists (quote ([declaration]))}, :private true, :name garden.compiler/render-declaration, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 26, :method-params ([declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([declaration]))}, do-preamble {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 715, :column 8, :end-line 715, :end-column 19, :private true, :arglists (quote ([{:keys [preamble]} stylesheet])), :doc "Prefix stylesheet with files in preamble. Not available in\n  ClojureScript."}, :private true, :name garden.compiler/do-preamble, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 19, :method-params ([p__23605 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 715, :end-line 715, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [preamble]} stylesheet])), :doc "Prefix stylesheet with files in preamble. Not available in\n  ClojureScript."}, auto-prefix? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 97, :column 8, :end-line 97, :end-column 20, :private true, :arglists (quote ([property]))}, :private true, :name garden.compiler/auto-prefix?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 20, :method-params ([property]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([property]))}, render-function {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 530, :column 8, :end-line 530, :end-column 23, :private true, :arglists (quote ([css-function])), :doc "Render a CSS function."}, :private true, :name garden.compiler/render-function, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 23, :method-params ([css-function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 1, :fn-var true, :arglists (quote ([css-function])), :doc "Render a CSS function."}, expand {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 131, :column 4, :end-line 131, :end-column 10, :protocol garden.compiler/IExpandable, :doc "Return a list containing the expanded form of `this`.", :arglists (quote ([this]))}, :protocol garden.compiler/IExpandable, :name garden.compiler/expand, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a list containing the expanded form of `this`."}, compile-css {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 741, :column 7, :end-line 741, :end-column 18, :arglists (quote ([flags & rules])), :doc "Convert any number of Clojure data structures to CSS.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(flags rules)], :arglists ([flags & rules]), :arglists-meta (nil)}}, :name garden.compiler/compile-css, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(flags rules)], :arglists ([flags & rules]), :arglists-meta (nil)}, :method-params [(flags rules)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 1, :fn-var true, :arglists ([flags & rules]), :doc "Convert any number of Clojure data structures to CSS."}, IExpandable {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 130, :column 14, :end-line 130, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {expand [[this]]}}}, :protocol-symbol true, :name garden.compiler/IExpandable, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 25, :column 1, :line 130, :protocol-info {:methods {expand [[this]]}}, :info nil, :end-line 130, :impls #{nil cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq garden.color/CSSColor cljs.core/BlackNode cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq garden.types/CSSFunction default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq garden.types/CSSAtRule cljs.core/PersistentTreeMap cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/RedNode}, :doc nil, :jsdoc ("@interface")}, render-media-expr {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 503, :column 8, :end-line 503, :end-column 25, :private true, :arglists (quote ([expr])), :doc "Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n  \n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\""}, :private true, :name garden.compiler/render-media-expr, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 25, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr])), :doc "Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n  \n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\""}, auto-prefixed-properties {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 92, :column 8, :end-line 92, :end-column 32, :private true, :arglists (quote ([])), :doc "Return the current list of auto-prefixed properties specified in `*flags*`."}, :private true, :name garden.compiler/auto-prefixed-properties, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current list of auto-prefixed properties specified in `*flags*`."}, l-brace {:name garden.compiler/l-brace, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 356, :column 1, :end-line 356, :end-column 23, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 356, :column 16, :end-line 356, :end-column 23, :private true}}, comma-separated-list {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 370, :column 8, :end-line 370, :end-column 28, :private true, :arglists (quote ([xs] [f xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}}, :private true, :name garden.compiler/comma-separated-list, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :method-params ([xs] [f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists ([xs] [f xs]), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces."}, render-at-rule {:name garden.compiler/render-at-rule, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 549, :column 1, :end-line 549, :end-column 35, :private true, :doc "Render a CSS at-rule", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 549, :column 21, :end-line 549, :end-column 35, :private true, :doc "Render a CSS at-rule"}}, expand-selector {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 198, :column 8, :end-line 198, :end-column 23, :private true, :arglists (quote ([selector parent]))}, :private true, :name garden.compiler/expand-selector, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 23, :method-params ([selector parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector parent]))}, *flags* {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 27, :column 3, :end-line 27, :end-column 10, :dynamic true, :private true, :doc "The current compiler flags."}, :private true, :name garden.compiler/*flags*, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 10, :column 1, :dynamic true, :line 23, :end-line 27, :doc "The current compiler flags."}, with-media-query-context {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 82, :column 11, :end-line 82, :end-column 35, :macro true, :arglists (quote ([selector-context & body])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env selector-context body)], :arglists ([&form &env selector-context & body]), :arglists-meta (nil)}}, :name garden.compiler/with-media-query-context, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 35, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env selector-context body)], :arglists ([&form &env selector-context & body]), :arglists-meta (nil)}, :method-params [(&form &env selector-context body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 82, :macro true, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env selector-context & body])}, expand-declaration {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 165, :column 8, :end-line 165, :end-column 26, :private true, :arglists (quote ([d]))}, :private true, :name garden.compiler/expand-declaration, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 26, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, indent {:name garden.compiler/indent, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 361, :column 1, :end-line 361, :end-column 22, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 361, :column 16, :end-line 361, :end-column 22, :private true}}, render-media-expr-part {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 491, :column 8, :end-line 491, :end-column 30, :private true, :arglists (quote ([[k v]])), :doc "Render the individual components of a media expression."}, :private true, :name garden.compiler/render-media-expr-part, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 30, :method-params ([p__23568]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 491, :end-line 491, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]])), :doc "Render the individual components of a media expression."}, do-output-to {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 732, :column 8, :end-line 732, :end-column 20, :private true, :arglists (quote ([{:keys [output-to]} stylesheet])), :doc "Write contents of stylesheet to disk."}, :private true, :name garden.compiler/do-output-to, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 20, :method-params ([p__23615 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 732, :end-line 732, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [output-to]} stylesheet])), :doc "Write contents of stylesheet to disk."}, indent-loc-re {:name garden.compiler/indent-loc-re, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 385, :column 1, :end-line 389, :end-column 16, :private true, :doc "Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 389, :column 3, :end-line 389, :end-column 16, :private true, :doc "Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name."}}, expand-stylesheet {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 265, :column 8, :end-line 265, :end-column 25, :private true, :arglists (quote ([xs]))}, :private true, :name garden.compiler/expand-stylesheet, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 25, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, *media-query-context* {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 72, :column 3, :end-line 72, :end-column 24, :dynamic true, :private true, :doc "The current media query context."}, :private true, :name garden.compiler/*media-query-context*, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 24, :column 1, :dynamic true, :line 68, :end-line 72, :doc "The current media query context."}, render-value {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 404, :column 8, :end-line 404, :end-column 20, :private true, :arglists (quote ([x])), :doc "Render the value portion of a declaration."}, :private true, :name garden.compiler/render-value, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Render the value portion of a declaration."}, indent-str {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 395, :column 8, :end-line 395, :end-column 18, :private true, :arglists (quote ([s]))}, :private true, :name garden.compiler/indent-str, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, parent-selector-re {:name garden.compiler/parent-selector-re, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 173, :column 1, :end-line 177, :end-column 21, :private true, :doc "Matches a single \"&\" or \"&\" follow by one or more \n  non-whitespace characters.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 177, :column 3, :end-line 177, :end-column 21, :private true, :doc "Matches a single \"&\" or \"&\" follow by one or more \n  non-whitespace characters."}}, prefix-declaration {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 453, :column 8, :end-line 453, :end-column 26, :private true, :arglists (quote ([declaration])), :doc "Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set."}, :private true, :name garden.compiler/prefix-declaration, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 26, :method-params ([declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 1, :fn-var true, :arglists (quote ([declaration])), :doc "Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set."}, prefix-auto-properties {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 442, :column 8, :end-line 442, :end-column 30, :private true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set."}, :private true, :name garden.compiler/prefix-auto-properties, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 30, :method-params ([vendors declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set."}, comma {:name garden.compiler/comma, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 353, :column 1, :end-line 353, :end-column 21, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 353, :column 16, :end-line 353, :end-column 21, :private true}}, expand-at-rule {:name garden.compiler/expand-at-rule, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 224, :column 1, :end-line 224, :end-column 35, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 224, :column 21, :end-line 224, :end-column 35, :private true}}, prefixed-blocks {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 429, :column 8, :end-line 429, :end-column 23, :private true, :arglists (quote ([vendors [p v]])), :doc "Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`."}, :private true, :name garden.compiler/prefixed-blocks, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 23, :method-params ([vendors p__23551]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors [p v]])), :doc "Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`."}, expand-media-query-expression {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 242, :column 8, :end-line 242, :end-column 37, :private true, :arglists (quote ([expression]))}, :private true, :name garden.compiler/expand-media-query-expression, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 37, :method-params ([expression]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expression]))}, l-brace-1 {:name garden.compiler/l-brace-1, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 358, :column 1, :end-line 358, :end-column 25, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 358, :column 16, :end-line 358, :end-column 25, :private true}}, *selector-context* {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 66, :column 3, :end-line 66, :end-column 21, :dynamic true, :private true, :doc "The current parent selector context."}, :private true, :name garden.compiler/*selector-context*, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 21, :column 1, :dynamic true, :line 62, :end-line 66, :doc "The current parent selector context."}, r-brace-1 {:name garden.compiler/r-brace-1, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 359, :column 1, :end-line 359, :end-column 25, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 359, :column 16, :end-line 359, :end-column 25, :private true}}, expand-rule {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 206, :column 8, :end-line 206, :end-column 19, :private true, :arglists (quote ([rule]))}, :private true, :name garden.compiler/expand-rule, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 19, :method-params ([rule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rule]))}, rule-sep {:name garden.compiler/rule-sep, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 360, :column 1, :end-line 360, :end-column 24, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 360, :column 16, :end-line 360, :end-column 24, :private true}}, compile-style {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 695, :column 7, :end-line 695, :end-column 20, :arglists (quote ([ms])), :doc "Convert a sequence of maps into CSS for use with the HTML style\n   attribute."}, :name garden.compiler/compile-style, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 20, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 695, :end-line 695, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :doc "Convert a sequence of maps into CSS for use with the HTML style\n   attribute."}, space-separated-list {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 363, :column 8, :end-line 363, :end-column 28, :private true, :arglists (quote ([xs] [f xs])), :doc "Return a space separated list of values.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}}, :private true, :name garden.compiler/space-separated-list, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :method-params ([xs] [f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 2, :fn-var true, :arglists ([xs] [f xs]), :doc "Return a space separated list of values."}, render-property-and-value {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 411, :column 8, :end-line 411, :end-column 33, :private true, :arglists (quote ([[prop val]]))}, :private true, :name garden.compiler/render-property-and-value, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 33, :method-params ([p__23547]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[prop val]]))}, render-css {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 347, :column 4, :end-line 347, :end-column 14, :protocol garden.compiler/CSSRenderer, :doc "Convert a Clojure data type in to a string of CSS.", :arglists (quote ([this]))}, :protocol garden.compiler/CSSRenderer, :name garden.compiler/render-css, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Convert a Clojure data type in to a string of CSS."}, prefix-all-properties {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 436, :column 8, :end-line 436, :end-column 29, :private true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`."}, :private true, :name garden.compiler/prefix-all-properties, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 29, :method-params ([vendors declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`."}, do-compile {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 705, :column 8, :end-line 705, :end-column 18, :private true, :arglists (quote ([flags rules])), :doc "Return a string of CSS."}, :private true, :name garden.compiler/do-compile, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 18, :method-params ([flags rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 705, :end-line 705, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flags rules])), :doc "Return a string of CSS."}, expand-selector-reference {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 188, :column 8, :end-line 188, :end-column 33, :private true, :arglists (quote ([selector]))}, :private true, :name garden.compiler/expand-selector-reference, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 33, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, do-compression {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 724, :column 8, :end-line 724, :end-column 22, :private true, :arglists (quote ([{:keys [pretty-print? pretty-print]} stylesheet])), :doc "Compress CSS if the pretty-print(?) flag is true."}, :private true, :name garden.compiler/do-compression, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 22, :method-params ([p__23610 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [pretty-print? pretty-print]} stylesheet])), :doc "Compress CSS if the pretty-print(?) flag is true."}, colon {:name garden.compiler/colon, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 354, :column 1, :end-line 354, :end-column 21, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 354, :column 16, :end-line 354, :end-column 21, :private true}}, add-blocks {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 423, :column 8, :end-line 423, :end-column 18, :private true, :arglists (quote ([f declaration])), :doc "For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block."}, :private true, :name garden.compiler/add-blocks, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 18, :method-params ([f declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f declaration])), :doc "For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block."}, render-rule {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 476, :column 8, :end-line 476, :end-column 19, :private true, :arglists (quote ([[selector declarations :as rule]])), :doc "Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded."}, :private true, :name garden.compiler/render-rule, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 19, :method-params ([p__23565]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 476, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[selector declarations :as rule]])), :doc "Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded."}, vendors {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 87, :column 8, :end-line 87, :end-column 15, :private true, :arglists (quote ([])), :doc "Return the current list of browser vendors specified in `*flags*`."}, :private true, :name garden.compiler/vendors, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current list of browser vendors specified in `*flags*`."}, with-selector-context {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 77, :column 11, :end-line 77, :end-column 32, :macro true, :arglists (quote ([selector-context & body])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env selector-context body)], :arglists ([&form &env selector-context & body]), :arglists-meta (nil)}}, :name garden.compiler/with-selector-context, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env selector-context body)], :arglists ([&form &env selector-context & body]), :arglists-meta (nil)}, :method-params [(&form &env selector-context body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :macro true, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env selector-context & body])}, media-expression-behavior {:name garden.compiler/media-expression-behavior, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 51, :column 1, :end-line 58, :end-column 28, :private true, :doc "Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 58, :column 3, :end-line 58, :end-column 28, :private true, :doc "Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries."}}, CSSRenderer {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 346, :column 14, :end-line 346, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {render-css [[this]]}}}, :protocol-symbol true, :name garden.compiler/CSSRenderer, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 25, :column 1, :line 346, :protocol-info {:methods {render-css [[this]]}}, :info nil, :end-line 346, :impls #{nil cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq garden.types/CSSUnit garden.color/CSSColor cljs.core/Keyword cljs.core/BlackNode cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq number garden.types/CSSFunction default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq garden.types/CSSAtRule cljs.core/PersistentTreeMap cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/RedNode}, :doc nil, :jsdoc ("@interface")}, semicolon {:name garden.compiler/semicolon, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 355, :column 1, :end-line 355, :end-column 25, :private true, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 355, :column 16, :end-line 355, :end-column 25, :private true}}, rule-join {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 382, :column 8, :end-line 382, :end-column 17, :private true, :arglists (quote ([xs]))}, :private true, :name garden.compiler/rule-join, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, divide-vec {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 107, :column 8, :end-line 107, :end-column 18, :private true, :arglists (quote ([pred coll])), :doc "Return a vector of [(filter pred coll) (remove pred coll)]."}, :private true, :name garden.compiler/divide-vec, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Return a vector of [(filter pred coll) (remove pred coll)]."}, render-unit {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :line 520, :column 8, :end-line 520, :end-column 19, :private true, :arglists (quote ([css-unit])), :doc "Render a CSSUnit."}, :private true, :name garden.compiler/render-unit, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/compiler.cljc", :end-column 19, :method-params ([css-unit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([css-unit])), :doc "Render a CSSUnit."}}, :require-macros {garden.compiler garden.compiler, color garden.color, garden.color garden.color, selectors garden.selectors, garden.selectors garden.selectors, units garden.units, garden.units garden.units}, :cljs.analyzer/constants {:seen #{:args :hue cljs.core/binding :else :pretty-print? :saturation :unit :default :frames :value :auto-prefix :media-expressions do :magnitude :rules :function :merge :prefix :vendors :output-to :preamble :media-queries :keyframes garden.compiler/*media-query-context* :nesting-behavior :url :identifier :lightness :alpha garden.compiler/*selector-context* :import :hierarchy :pretty-print :media}, :order [:pretty-print? :preamble :output-to :vendors :auto-prefix :media-expressions :nesting-behavior :default :merge cljs.core/binding garden.compiler/*selector-context* do garden.compiler/*media-query-context* :hierarchy :identifier :keyframes :value :frames :media :media-queries :rules :prefix :else :magnitude :unit :function :args :alpha :hue :saturation :lightness :import :url :pretty-print]}, :doc "Functions for compiling Clojure data structures to CSS."}