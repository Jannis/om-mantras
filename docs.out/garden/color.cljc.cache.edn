;; Analyzed by ClojureScript 1.7.145
{:use-macros {defcolor-operation garden.color}, :excludes #{complement}, :name garden.color, :imports nil, :requires {string clojure.string, clojure.string clojure.string, util garden.util, garden.util garden.util}, :uses nil, :defs {update-color {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 276, :column 8, :end-line 276, :end-column 20, :private true, :arglists (quote ([color field f v]))}, :private true, :name garden.color/update-color, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 20, :method-params ([color field f v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 4, :fn-var true, :arglists (quote ([color field f v]))}, color+ {:name garden.color/color+, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 256, :column 1, :end-line 259, :end-column 9, :doc "Add the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more])), :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 259, :column 3, :end-line 259, :end-column 9, :doc "Add the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more]))}}, mix {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 310, :column 7, :end-line 310, :end-column 10, :arglists (quote ([color-1 color-2] [color-1 color-2 & more])), :doc "Mix two or more colors by averaging their RGB channels.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([color-1 color-2]), :arglists ([color-1 color-2] [color-1 color-2 & more]), :arglists-meta (nil nil)}}, :name garden.color/mix, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([color-1 color-2]), :arglists ([color-1 color-2] [color-1 color-2 & more]), :arglists-meta (nil nil)}, :method-params ([color-1 color-2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists ([color-1 color-2] [color-1 color-2 & more]), :doc "Mix two or more colors by averaging their RGB channels."}, color-name->color {:name garden.color/color-name->color, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 541, :column 1, :end-line 544, :end-column 20, :private true, :doc "Helper function for from-name.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 544, :column 3, :end-line 544, :end-column 20, :private true, :doc "Helper function for from-name."}}, invert {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 305, :column 7, :end-line 305, :end-column 13, :arglists (quote ([color])), :doc "Return the inversion of a color."}, :name garden.color/invert, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Return the inversion of a color."}, rotate-hue {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 280, :column 7, :end-line 280, :end-column 17, :arglists (quote ([color amount])), :doc "Rotates the hue value of a given color by amount."}, :name garden.color/rotate-hue, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 17, :method-params ([color amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color amount])), :doc "Rotates the hue value of a given color by amount."}, color* {:name garden.color/color*, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 266, :column 1, :end-line 269, :end-column 9, :doc "Multiply the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more])), :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 269, :column 3, :end-line 269, :end-column 9, :doc "Multiply the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more]))}}, hsl->hex {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 191, :column 7, :end-line 191, :end-column 15, :arglists (quote ([color])), :doc "Convert an HSL color map to a hexadecimal string."}, :name garden.color/hsl->hex, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Convert an HSL color map to a hexadecimal string."}, rgb->hex {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 129, :column 7, :end-line 129, :end-column 15, :arglists (quote ([{r :red, g :green, b :blue}])), :doc "Convert an RGB color map to a hexadecimal color."}, :name garden.color/rgb->hex, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([p__23396]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{r :red, g :green, b :blue}])), :doc "Convert an RGB color map to a hexadecimal color."}, as-hex {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 207, :column 7, :end-line 207, :end-column 13, :arglists (quote ([x])), :doc "Convert a color to a hexadecimal string."}, :name garden.color/as-hex, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert a color to a hexadecimal string."}, analogous {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 330, :column 7, :end-line 330, :end-column 16, :arglists (quote ([color] [color clockwise?])), :doc "Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color clockwise?]), :arglists ([color] [color clockwise?]), :arglists-meta (nil nil)}}, :name garden.color/analogous, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color clockwise?]), :arglists ([color] [color clockwise?]), :arglists-meta (nil nil)}, :method-params ([color] [color clockwise?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 2, :fn-var true, :arglists ([color] [color clockwise?]), :doc "Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction."}, rgba {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 56, :column 7, :end-line 56, :end-column 11, :arglists (quote ([[r g b a]] [r g b a])), :doc "Create an RGBA color.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[r g b a]] [r g b a]), :arglists ([[r g b a]] [r g b a]), :arglists-meta (nil nil)}}, :name garden.color/rgba, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[r g b a]] [r g b a]), :arglists ([[r g b a]] [r g b a]), :arglists-meta (nil nil)}, :method-params ([[r g b a]] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 4, :fn-var true, :arglists ([[r g b a]] [r g b a]), :doc "Create an RGBA color."}, color-name->hex {:name garden.color/color-name->hex, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 384, :column 1, :end-line 384, :end-column 21, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 384, :column 6, :end-line 384, :end-column 21}}, darken {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 300, :column 7, :end-line 300, :end-column 13, :arglists (quote ([color amount])), :doc "Decrease the lightness value a given color by amount."}, :name garden.color/darken, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([color amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color amount])), :doc "Decrease the lightness value a given color by amount."}, hue->rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 179, :column 8, :end-line 179, :end-column 16, :private true, :arglists (quote ([m1 m2 h]))}, :private true, :name garden.color/hue->rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 16, :method-params ([m1 m2 h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m1 m2 h]))}, hsl? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 95, :column 7, :end-line 95, :end-column 11, :arglists (quote ([color])), :doc "Return true if color is an HSL color."}, :name garden.color/hsl?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 11, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Return true if color is an HSL color."}, hex->hsl {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 196, :column 7, :end-line 196, :end-column 15, :arglists (quote ([color])), :doc "Convert a hexadecimal color to an HSL color."}, :name garden.color/hex->hsl, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Convert a hexadecimal color to an HSL color."}, as-rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 216, :column 7, :end-line 216, :end-column 13, :arglists (quote ([x])), :doc "Convert a color to a RGB."}, :name garden.color/as-rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert a color to a RGB."}, from-name {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 547, :column 7, :end-line 547, :end-column 16, :arglists (quote ([n])), :doc "Given a CSS color name n return an instance of CSSColor."}, :name garden.color/from-name, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Given a CSS color name n return an instance of CSSColor."}, as-color {:name garden.color/as-color, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 44, :column 1, :end-line 44, :end-column 14, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 44, :column 6, :end-line 44, :end-column 14}}, restrict-rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 236, :column 8, :end-line 236, :end-column 20, :private true, :arglists (quote ([m]))}, :private true, :name garden.color/restrict-rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, rgb->hsl {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 137, :column 7, :end-line 137, :end-column 15, :arglists (quote ([{:keys [red green blue], :as color}])), :doc "Convert an RGB color map to an HSL color map."}, :name garden.color/rgb->hsl, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([p__23402]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [red green blue], :as color}])), :doc "Convert an RGB color map to an HSL color map."}, ex-info-color-name {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 532, :column 8, :end-line 532, :end-column 26, :private true, :arglists (quote ([n])), :doc "Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."}, :private true, :name garden.color/ex-info-color-name, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 26, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 532, :end-line 532, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."}, rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 46, :column 7, :end-line 46, :end-column 10, :arglists (quote ([[r g b :as vs]] [r g b])), :doc "Create an RGB color.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([[r g b :as vs]] [r g b]), :arglists ([[r g b :as vs]] [r g b]), :arglists-meta (nil nil)}}, :name garden.color/rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([[r g b :as vs]] [r g b]), :arglists ([[r g b :as vs]] [r g b]), :arglists-meta (nil nil)}, :method-params ([[r g b :as vs]] [r g b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists ([[r g b :as vs]] [r g b]), :doc "Create an RGB color."}, tetrad {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 355, :column 7, :end-line 355, :end-column 13, :arglists (quote ([color] [color angle])), :doc "Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color angle]), :arglists ([color] [color angle]), :arglists-meta (nil nil)}}, :name garden.color/tetrad, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color angle]), :arglists ([color] [color angle]), :arglists-meta (nil nil)}, :method-params ([color] [color angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists ([color] [color angle]), :doc "Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed)."}, hsl {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 66, :column 7, :end-line 66, :end-column 10, :arglists (quote ([[h s l]] [h s l])), :doc "Create an HSL color.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([[h s l]] [h s l]), :arglists ([[h s l]] [h s l]), :arglists-meta (nil nil)}}, :name garden.color/hsl, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([[h s l]] [h s l]), :arglists ([[h s l]] [h s l]), :arglists-meta (nil nil)}, :method-params ([[h s l]] [h s l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists ([[h s l]] [h s l]), :doc "Create an HSL color."}, hex-re {:name garden.color/hex-re, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 106, :column 1, :end-line 111, :end-column 9, :doc "Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 111, :column 3, :end-line 111, :end-column 9, :doc "Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."}}, rgb? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 89, :column 7, :end-line 89, :end-column 11, :arglists (quote ([color])), :doc "Return true if color is an RGB color."}, :name garden.color/rgb?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 11, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Return true if color is an RGB color."}, color? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 101, :column 7, :end-line 101, :end-column 13, :arglists (quote ([x])), :doc "Return true if x is a color."}, :name garden.color/color?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is a color."}, hue-rotations {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 326, :column 8, :end-line 326, :end-column 21, :private true, :arglists (quote ([color & amounts])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color amounts)], :arglists ([color & amounts]), :arglists-meta (nil)}}, :private true, :name garden.color/hue-rotations, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color amounts)], :arglists ([color & amounts]), :arglists-meta (nil)}, :method-params [(color amounts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 1, :fn-var true, :arglists ([color & amounts])}, lighten {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 295, :column 7, :end-line 295, :end-column 14, :arglists (quote ([color amount])), :doc "Increase the lightness value a given color by amount."}, :name garden.color/lighten, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 14, :method-params ([color amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color amount])), :doc "Increase the lightness value a given color by amount."}, hex? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 113, :column 7, :end-line 113, :end-column 11, :arglists (quote ([x])), :doc "Returns true if x is a hexadecimal color."}, :name garden.color/hex?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a hexadecimal color."}, rgb-clip {:name garden.color/rgb-clip, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 204, :column 1, :end-line 204, :end-column 14, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 204, :column 6, :end-line 204, :end-column 14}}, triad {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 340, :column 7, :end-line 340, :end-column 12, :arglists (quote ([color])), :doc "Given a color return a triple of colors which are equidistance apart\n  on the color wheel."}, :name garden.color/triad, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 12, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Given a color return a triple of colors which are equidistance apart\n  on the color wheel."}, make-color-operation {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 240, :column 8, :end-line 240, :end-column 28, :private true, :arglists (quote ([op]))}, :private true, :name garden.color/make-color-operation, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 28, :method-params ([op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op]))}, as-hsl {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 226, :column 7, :end-line 226, :end-column 13, :arglists (quote ([x])), :doc "Convert a color to a HSL."}, :name garden.color/as-hsl, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert a color to a HSL."}, split-complement {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 346, :column 7, :end-line 346, :end-column 23, :arglists (quote ([color] [color distance-from-complement])), :doc "Given a color return a triple of the color and the two colors on\n  either side of it's complement.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color distance-from-complement]), :arglists ([color] [color distance-from-complement]), :arglists-meta (nil nil)}}, :name garden.color/split-complement, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color distance-from-complement]), :arglists ([color] [color distance-from-complement]), :arglists-meta (nil nil)}, :method-params ([color] [color distance-from-complement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 2, :fn-var true, :arglists ([color] [color distance-from-complement]), :doc "Given a color return a triple of the color and the two colors on\n  either side of it's complement."}, percent-clip {:name garden.color/percent-clip, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 201, :column 1, :end-line 201, :end-column 18, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 201, :column 6, :end-line 201, :end-column 18}}, hsl->rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 161, :column 7, :end-line 161, :end-column 15, :arglists (quote ([{:keys [hue saturation lightness], :as color}])), :doc "Convert an HSL color map to an RGB color map."}, :name garden.color/hsl->rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([p__23416]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [hue saturation lightness], :as color}])), :doc "Convert an HSL color map to an RGB color map."}, shades {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 370, :column 7, :end-line 370, :end-column 13, :arglists (quote ([color] [color step])), :doc "Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color step]), :arglists ([color] [color step]), :arglists-meta (nil nil)}}, :name garden.color/shades, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([color] [color step]), :arglists ([color] [color step]), :arglists-meta (nil nil)}, :method-params ([color] [color step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists ([color] [color step]), :doc "Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list."}, hex->rgb {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 118, :column 7, :end-line 118, :end-column 15, :arglists (quote ([s])), :doc "Convert a hexadecimal color to an RGB color map."}, :name garden.color/hex->rgb, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Convert a hexadecimal color to an RGB color map."}, map->CSSColor {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 22, :column 12, :end-line 22, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__23345]))}, :name garden.color/map->CSSColor, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 20, :method-params ([G__23345]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__23345]))}, desaturate {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 290, :column 7, :end-line 290, :end-column 17, :arglists (quote ([color amount])), :doc "Decrease the saturation value of a given color by amount."}, :name garden.color/desaturate, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 17, :method-params ([color amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color amount])), :doc "Decrease the saturation value of a given color by amount."}, hsla {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 79, :column 7, :end-line 79, :end-column 11, :arglists (quote ([[h s l a]] [h s l a])), :doc "Create an HSLA color.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[h s l a]] [h s l a]), :arglists ([[h s l a]] [h s l a]), :arglists-meta (nil nil)}}, :name garden.color/hsla, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[h s l a]] [h s l a]), :arglists ([[h s l a]] [h s l a]), :arglists-meta (nil nil)}, :method-params ([[h s l a]] [h s l a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 4, :fn-var true, :arglists ([[h s l a]] [h s l a]), :doc "Create an HSLA color."}, ->CSSColor {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 22, :column 12, :end-line 22, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([red green blue hue saturation lightness alpha]))}, :name garden.color/->CSSColor, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 20, :method-params ([red green blue hue saturation lightness alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 7, :fn-var true, :arglists (quote ([red green blue hue saturation lightness alpha]))}, CSSColor {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name garden.color/CSSColor, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 20, :type true, :column 12, :internal-ctor true, :line 22, :record true, :end-line 22, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, complement {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 321, :column 7, :end-line 321, :end-column 17, :arglists (quote ([color])), :doc "Return the complement of a color."}, :name garden.color/complement, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 17, :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Return the complement of a color."}, saturate {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 285, :column 7, :end-line 285, :end-column 15, :arglists (quote ([color amount])), :doc "Increase the saturation value of a given color by amount."}, :name garden.color/saturate, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :end-column 15, :method-params ([color amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color amount])), :doc "Increase the saturation value of a given color by amount."}, color-div {:name garden.color/color-div, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 271, :column 1, :end-line 274, :end-column 12, :doc "Multiply the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more])), :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 274, :column 3, :end-line 274, :end-column 12, :doc "Multiply the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more]))}}, color- {:name garden.color/color-, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 261, :column 1, :end-line 264, :end-column 9, :doc "Subtract the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more])), :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/1lw/unatt4/docs.out/garden/color.cljc", :line 264, :column 3, :end-line 264, :end-column 9, :doc "Subtract the RGB components of two or more colors.", :arglists (quote ([a] [a b] [a b & more]))}}}, :require-macros {garden.color garden.color}, :cljs.analyzer/constants {:seen #{:hue :aquamarine :lime :deepskyblue :darksalmon :antiquewhite :mediumturquoise :slategrey :slategray :sienna :orange :navajowhite :given :lavenderblush :firebrick :orangered :palevioletred :lawngreen :seashell :lightpink :darkolivegreen :aliceblue :gray :lightsteelblue :whitesmoke :darkgoldenrod :tan :bisque :white :else :lightgreen :saturation :darkseagreen :crimson :darkslategray :mistyrose :chocolate hue :yellow :cadetblue :navy :ghostwhite :dimgrey :seagreen :green :mediumseagreen :indigo :olivedrab :cyan :peachpuff :limegreen :mediumslateblue :violet :sandybrown :yellowgreen :mediumspringgreen :steelblue :rosybrown :cornflowerblue :ivory :lightgoldenrodyellow :magnitude :salmon :darkcyan saturation :peru :cornsilk :lightslategray :blueviolet :forestgreen :lightseagreen green :gold :gainsboro :darkorchid :burlywood :lightskyblue :chartreuse :snow :moccasin :honeydew :aqua :darkred :mediumorchid :lightsalmon :saddlebrown :wheat :springgreen :lightslategrey :darkblue :powderblue :turquoise :blanchedalmond :papayawhip :slateblue :lightblue :skyblue :red :lightyellow :blue :palegreen :greenyellow :khaki :maroon :expected :darkgrey :midnightblue :floralwhite :deeppink :paleturquoise :darkkhaki :azure :indianred :lightness :darkviolet :mediumpurple :fuchsia :alpha :coral :mediumvioletred :lemonchiffon :mediumblue :darkmagenta :goldenrod :darkorange :orchid :plum :pink :teal :magenta :lightgrey :purple :dodgerblue :darkturquoise red :mintcream blue :hotpink :thistle :royalblue :darkgreen :darkslateblue :silver lightness :darkgray :oldlace :mediumaquamarine :brown :lightgray :olive :lightcoral :tomato :lightcyan alpha :linen :darkslategrey :lavender :dimgray :palegoldenrod :beige :black}, :order [:red :green :blue :hue :saturation :lightness :alpha red green blue hue saturation lightness alpha :magnitude :else :aquamarine :lime :deepskyblue :darksalmon :antiquewhite :mediumturquoise :slategrey :slategray :sienna :orange :navajowhite :lavenderblush :firebrick :orangered :palevioletred :lawngreen :seashell :lightpink :darkolivegreen :aliceblue :gray :lightsteelblue :whitesmoke :darkgoldenrod :tan :bisque :white :lightgreen :darkseagreen :crimson :darkslategray :mistyrose :chocolate :yellow :cadetblue :navy :ghostwhite :dimgrey :seagreen :mediumseagreen :indigo :olivedrab :cyan :peachpuff :limegreen :mediumslateblue :violet :sandybrown :yellowgreen :mediumspringgreen :steelblue :rosybrown :cornflowerblue :ivory :lightgoldenrodyellow :salmon :darkcyan :peru :cornsilk :lightslategray :blueviolet :forestgreen :lightseagreen :gold :gainsboro :darkorchid :burlywood :lightskyblue :chartreuse :snow :moccasin :honeydew :aqua :darkred :mediumorchid :lightsalmon :saddlebrown :wheat :springgreen :lightslategrey :darkblue :powderblue :turquoise :blanchedalmond :papayawhip :slateblue :lightblue :skyblue :lightyellow :palegreen :greenyellow :khaki :maroon :darkgrey :midnightblue :floralwhite :deeppink :paleturquoise :darkkhaki :azure :indianred :darkviolet :mediumpurple :fuchsia :coral :mediumvioletred :lemonchiffon :mediumblue :darkmagenta :goldenrod :darkorange :orchid :plum :pink :teal :magenta :lightgrey :purple :dodgerblue :darkturquoise :mintcream :hotpink :thistle :royalblue :darkgreen :darkslateblue :silver :darkgray :oldlace :mediumaquamarine :brown :lightgray :olive :lightcoral :tomato :lightcyan :linen :darkslategrey :lavender :dimgray :palegoldenrod :beige :black :given :expected]}, :doc "Utilities for color creation, conversion, and manipulation."}