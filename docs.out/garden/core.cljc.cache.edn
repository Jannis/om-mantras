;; Analyzed by ClojureScript 1.7.145
{:name garden.core, :doc "Convert Clojure data structures to CSS.", :excludes #{}, :use-macros nil, :require-macros {compiler garden.compiler, garden.compiler garden.compiler}, :uses nil, :requires {compiler garden.compiler, garden.compiler garden.compiler}, :imports nil, :defs {css {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/core.cljc", :line 5, :column 15, :end-line 5, :end-column 18, :tag String, :arglists (quote ([rules] [flags? rules])), :doc "Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(rules)], :arglists ([& rules]), :arglists-meta (nil)}}, :name garden.core/css, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(rules)], :arglists ([& rules]), :arglists-meta (nil)}, :method-params [(rules)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :ret-tag String, :end-line 5, :max-fixed-arity 0, :tag String, :fn-var true, :arglists ([& rules]), :doc "Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler."}, style {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/core.cljc", :line 12, :column 15, :end-line 12, :end-column 20, :tag String, :arglists (quote ([& maps])), :doc "Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name garden.core/style, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :ret-tag String, :end-line 12, :max-fixed-arity 0, :tag String, :fn-var true, :arglists ([& maps]), :doc "Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute."}}}