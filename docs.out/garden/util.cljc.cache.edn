;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name garden.util, :imports nil, :requires {str clojure.string, clojure.string clojure.string, t garden.types, garden.types garden.types, goog.string goog.string, goog.string.format goog.string.format}, :uses nil, :defs {space-join {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([xs])), :doc "Return a space separated list of values."}, :name garden.util/space-join, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :doc "Return a space separated list of values."}, at-import? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 114, :column 7, :end-line 114, :end-column 17, :arglists (quote ([x])), :doc "True if `x` is a CSS `@import` rule."}, :name garden.util/at-import?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@import` rule."}, int->string {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 55, :column 7, :end-line 55, :end-column 18, :arglists (quote ([i & [radix]])), :doc "Convert an integer to a string with optional base.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(i [radix])], :arglists ([i & [radix]]), :arglists-meta (nil)}}, :name garden.util/int->string, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(i [radix])], :arglists ([i & [radix]]), :arglists-meta (nil)}, :method-params [(i [radix])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists ([i & [radix]]), :doc "Convert an integer to a string with optional base."}, rule? {:name garden.util/rule?, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 92, :column 1, :end-line 94, :end-column 8, :doc "Alias to `vector?`.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 94, :column 3, :end-line 94, :end-column 8, :doc "Alias to `vector?`."}}, to-str {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 28, :column 12, :end-line 28, :end-column 18, :tag String, :protocol garden.util/ToString, :doc "Convert a value into a string.", :arglists (quote ([this]))}, :protocol garden.util/ToString, :name garden.util/to-str, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :ret-tag String, :end-line 28, :max-fixed-arity 1, :tag String, :fn-var true, :arglists (quote ([this])), :doc "Convert a value into a string."}, cartesian-product {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 162, :column 7, :end-line 162, :end-column 24, :arglists (quote ([& seqs])), :doc "All the ways to take one item from each sequence.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}}, :name garden.util/cartesian-product, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}, :method-params [(seqs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 0, :fn-var true, :arglists ([& seqs]), :doc "All the ways to take one item from each sequence."}, format {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 18, :column 10, :end-line 18, :end-column 16, :arglists (quote ([fmt & args])), :doc "Formats a string using goog.string.format.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name garden.util/format, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Formats a string using goog.string.format."}, clip {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 150, :column 7, :end-line 150, :end-column 11, :arglists (quote ([a b n])), :doc "Return a number such that n is no less than a and no more than b."}, :name garden.util/clip, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 11, :method-params ([a b n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b n])), :doc "Return a number such that n is no less than a and no more than b."}, between? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 143, :column 7, :end-line 143, :end-column 15, :arglists (quote ([n a b])), :doc "True if n is a number between a and b."}, :name garden.util/between?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 15, :method-params ([n a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n a b])), :doc "True if n is a number between a and b."}, at-media? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 104, :column 7, :end-line 104, :end-column 16, :arglists (quote ([x])), :doc "True if `x` is a CSS `@media` rule."}, :name garden.util/at-media?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@media` rule."}, string->int {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 46, :column 7, :end-line 46, :end-column 18, :arglists (quote ([s & [radix]])), :doc "Convert a string to an integer with optional base.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [radix])], :arglists ([s & [radix]]), :arglists-meta (nil)}}, :name garden.util/string->int, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [radix])], :arglists ([s & [radix]]), :arglists-meta (nil)}, :method-params [(s [radix])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([s & [radix]]), :doc "Convert a string to an integer with optional base."}, as-str {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 41, :column 15, :end-line 41, :end-column 21, :tag String, :arglists (quote ([& args])), :doc "Convert a variable number of values into strings.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name garden.util/as-str, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :ret-tag String, :end-line 41, :max-fixed-arity 0, :tag String, :fn-var true, :arglists ([& args]), :doc "Convert a variable number of values into strings."}, comma-join {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 69, :column 7, :end-line 69, :end-column 17, :arglists (quote ([xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces."}, :name garden.util/comma-join, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces."}, vendor-prefix {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 127, :column 7, :end-line 127, :end-column 20, :arglists (quote ([p s])), :doc "Attach a CSS vendor prefix to s."}, :name garden.util/vendor-prefix, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 20, :method-params ([p s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p s])), :doc "Attach a CSS vendor prefix to s."}, hash-map? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([x])), :doc "True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."}, :name garden.util/hash-map?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`."}, natural? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 138, :column 7, :end-line 138, :end-column 15, :arglists (quote ([n])), :doc "True if n is a natural number."}, :name garden.util/natural?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "True if n is a natural number."}, ToString {:meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 27, :column 14, :end-line 27, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {to-str [[this]]}}}, :protocol-symbol true, :name garden.util/ToString, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 22, :column 1, :line 27, :protocol-info {:methods {to-str [[this]]}}, :info nil, :end-line 27, :impls #{nil cljs.core/Keyword default}, :doc nil, :jsdoc ("@interface")}, wrap-quotes {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 79, :column 7, :end-line 79, :end-column 18, :arglists (quote ([s])), :doc "Wrap a string with double quotes."}, :name garden.util/wrap-quotes, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Wrap a string with double quotes."}, prefix {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([p s])), :doc "Attach a CSS style prefix to s."}, :name garden.util/prefix, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 13, :method-params ([p s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p s])), :doc "Attach a CSS style prefix to s."}, declaration? {:name garden.util/declaration?, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 96, :column 1, :end-line 98, :end-column 15, :doc "Alias to `hash-map?`.", :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 98, :column 3, :end-line 98, :end-column 15, :doc "Alias to `hash-map?`."}}, at-keyframes? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 109, :column 7, :end-line 109, :end-column 20, :arglists (quote ([x])), :doc "True if `x` is a CSS `@keyframes` rule."}, :name garden.util/at-keyframes?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@keyframes` rule."}, at-rule? {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 100, :column 7, :end-line 100, :end-column 15, :arglists (quote ([x]))}, :name garden.util/at-rule?, :variadic false, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, average {:protocol-inline nil, :meta {:file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :line 156, :column 7, :end-line 156, :end-column 14, :arglists (quote ([n m & more])), :doc "Return the average of two or more numbers.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n m more)], :arglists ([n m & more]), :arglists-meta (nil)}}, :name garden.util/average, :variadic true, :file "/home/jannis/.boot/cache/tmp/home/jannis/oss/om-mantras/93p/-293pcu/docs.out/garden/util.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n m more)], :arglists ([n m & more]), :arglists-meta (nil)}, :method-params [(n m more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists ([n m & more]), :doc "Return the average of two or more numbers."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:keyframes :identifier :import :media}, :order [:identifier :media :keyframes :import]}, :doc "Utility functions used by Garden."}